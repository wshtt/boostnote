createdAt: "2020-09-21T03:40:32.276Z"
updatedAt: "2020-09-23T15:39:12.900Z"
type: "MARKDOWN_NOTE"
folder: "ff82907153aa97c03b03"
title: "Git"
tags: []
content: '''
  # Git
  
  ### 一、 Git 与 Svn
  
        1、Git 是分布式的，SVN 不是：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。
  
        2、Git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。
  
        3、Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。
  
        4、Git 没有一个全局的版本号，而 SVN 有：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。
  
        5、Git 的内容完整性要优于 SVN：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。
  
  ![4ed674b8.png](:storage\\ba9accb5-aafc-4458-8811-6c901007b6e4\\4ed674b8.png)
  
  ### 二、 安装配置
  
  ##### 一、
  >在使用Git前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行。
  
  >Git 各平台安装包下载地址为：http://git-scm.com/downloads
  
  ##### 二、Windows 平台上安装
  >国内的镜像：https://npm.taobao.org/mirrors/git-for-windows/
  
  >完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。
  
  >在开始菜单里找到"Git"->"Git Bash"，会弹出 Git 命令窗口，你可以在该窗口进行 Git 操作。
  
  ![50e8f080.png](:storage\\ba9accb5-aafc-4458-8811-6c901007b6e4\\50e8f080.png)
  
  ### 三、 Git 配置
  
      Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。
      这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：
  
  >/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。
  
  >~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。
  
  >当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。
  
  ###### 1. 用户信息
      
      设置用户信息
        $ git config --global user.name "Your Name"
        $ git config --global user.email "email@example.com"
      
      查看用户信息
        $ git config user.name
        $ git config user.email
      直接找到 C:\\Users\\26564\\.gitconfig 修改
        [user]
          name = wu
          email = 2656439669@qq.com      
  
  >如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。
  
  ###### 2. 
  
      查看配置信息
        $ git config --list
      
      打开配置文件内容
        $ vim ~/.gitconfig
  
  #### 工作流程
  
  一般工作流程如下：
  
  >克隆 Git 资源作为工作目录。
  >在克隆的资源上添加或修改文件。
  >如果其他人修改了，你可以更新资源。
  >在提交前查看修改。
  >提交修改。
  >在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。
  >
  
  #### 创建 Git 仓库
      
      初始化当前目录，该命令执行完后会在当前目录生成一个 .git 目录。使用我们指定目录作为Git仓库。
      git init
      
      初始化当前目录下的指定文件夹
      git init newrepo
  
      克隆项目  [url] 是你要拷贝的项目
      git clone [url]  
      
      在当前目录下创建一个名为grit的目录，作为git 仓库。
      $ git clone $ git clone git@github.com:wushutong/boostnote.git
      指定 mygrit 文件夹为 git 仓库
      $ git clone $ git clone git@github.com:wushutong/boostnote.git mygrit
      
      显示当前 git 配置信息
      $ git config --list
      
      编辑 git 配置文件
      $ git config -e    # 针对当前仓库 
      $ git config -e --global   # 针对系统上所有仓库
      如果去掉 --global 参数只对当前仓库有效。
      
  #### 常用命令
  
  ![1622372b.png](:storage\\ba9accb5-aafc-4458-8811-6c901007b6e4\\1622372b.png)
  
  >workspace：工作区
  staging area：暂存区/缓存区
  local repository：或本地仓库
  remote repository：远程仓库
  
  
  ###### git add
        git add 命令可将该文件添加到暂存区。
  
        添加一个或多个文件到暂存区：
        git add [file1] [file2] ...
        git add a b.java c.txt ...
        
        添加指定目录到暂存区，包括子目录：
        git add [dir]
        
        添加当前目录下的所有文件到暂存区：
        git add .
  
  ###### git status
        git status 命令用于查看在你上次提交之后是否有对文件进行再次修改。
        分为好几个标识符？？？？？？
        
  ###### git diff
        git diff 命令比较文件的不同，即比较文件在暂存区和工作区的差异。
        
        显示暂存区和工作区的差异:
        $ git diff [file]
        
        显示暂存区和上一次提交(commit)的差异:
        $ git diff --cached [file]
        或
        $ git diff --staged [file]
        
        显示两次提交之间的差异:
        $ git diff [first-branch]...[second-branch]
        
  ###### git commit
        git commit 命令将暂存区内容添加到本地仓库中。
        
        提交暂存区到本地仓库中: 要输入日志消息 ""
        git commit -m [message]
  
        提交暂存区的指定文件到仓库区：
        $ git commit [file1] [file2] ... -m [message]
        
        -a 参数设置修改文件后不需要执行 git add 命令，直接来提交 跳过add，相当于自动add
        $ git commit -a
        
  ###### git push
        
        git push 命用于从将本地的分支版本上传到远程并合并。
  
  ```shell
  
  git push <远程主机名> <本地分支名>:<远程分支名>
  $ git push origin master:master
  
  如果本地分支名与远程分支名相同，则可以省略冒号：
  
  git push <远程主机名> <本地分支名>
  $ git push origin master
  
  如果本地版本与远程版本有差异，但又要强制推送可以使用 --force 参数：
  
  git push --force origin master
  删除主机但分支可以使用 --delete 参数，以下命令表示删除 origin 主机的 master 分支：
  
  git push origin --delete master
  ```
  ###### git pull
  
      git pull 命用于从远程获取代码并合并本地的版本。
  
  ```shell
  git pull <远程主机名> <远程分支名>:<本地分支名>
  
  $ git pull
  $ git pull origin
  
  将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。
  $ git pull origin master:brantest
  
  如果远程分支是与当前分支合并，则冒号后面的部分可以省略。
  $ git pull origin master
  ```
        
  ###### git remote
      
      git remote 命用于在远程仓库的操作。
      
  ```shell
  显示所有远程仓库：
  $ git remote -v
  origin  https://github.com/tianqixin/runoob-git-test (fetch)
  origin  https://github.com/tianqixin/runoob-git-test (push)
  
  origin 为远程地址的别名。
  
  显示某个远程仓库的信息：
  git remote show [remote]
  $ git remote show https://github.com/tianqixin/runoob-git-test
  
  ```
  
  #### 问题 一
  ```shell
  git上传代码报错
  
  $ ssh -T git@github.com
  ssh: connect to host github.com port 22: Connection timed out
  
  
  $ git push -u origin master
  fatal: 'git@github.com/wushutong/record.git' does not appear to be a git repository
  fatal: Could not read from remote repository.
  
  Please make sure you have the correct access rights
  and the repository exists.
  ```
  
  >这个时候需要检查一下SSH是否能够连接成功，输入以下命令
  `ssh -T git@github.com`
      
      $ ssh -T git@github.com
      ssh: connect to host github.com port 22: Connection timed out
  
  >打开存放ssh的目录(windows 在user目录下)
  
  `cd ~/.ssh`  进 .ssh 目录
  
  `ls`  查看文件
  
  >查看是否存在 id_rsa   id_rsa.pun  known_hosts 三个文件 目的就是查看此设备有没有配置过SSH key
  >如果没有，就是缺少 ssh key，生成即可
  
  >如果存在，则新建config文件输入下面内容
  
  ```txt
  Host github.com
  User 2656439669@qq.com
  Hostname ssh.github.com
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/id_rsa
  Port 443
  ```
  
  
  >其中User后面为GitHub的账号名称(邮箱)
  
  >创建方法：
  
  `vim comfig`
  
  >然后编辑，最后:wq退出
  
  >保存之后再次执行"ssh -T git@github.com"时，会出现如下提示，回车"yes"即可
  
  ```shell
  $ ssh -T git@github.com
  The authenticity of host '[ssh.github.com]:443 ([18.140.96.234]:443)' can't be established.
  RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
  Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
  Warning: Permanently added '[ssh.github.com]:443,[18.140.96.234]:443' (RSA) to the list of known hosts.
  Hi wushutong! You've successfully authenticated, but GitHub does not provide shell access.
  
  $ ssh -T git@github.com
  Hi wushutong! You've successfully authenticated, but GitHub does not provide shell access.
  ```
  
  #### 生成 ssh key
      
      生成key命令
      $ ssh-keygen -t rsa -C "邮箱"
      
  下面的输入内容可以不写，直接回车，但是默认名称就是id_rsa.如果我们在以后也需要配置ssh，那么容易产生混淆。建议后面加上ssh为何而建。也是为了避免ssh覆盖。
  
  Enter file in which to save the key (/Users/apple/.ssh/id_rsa): /Users/apple/.ssh/id_rsa_oschina 配置保存目录
  
  Enter passphrase (empty for no passphrase):  输入密码
  
  Enter same passphrase again:   再次输入密码
  ```shell
  $ ssh-keygen -t rsa -C "2656439669@qq.com"
  Generating public/private rsa key pair.
  Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):
  /c/Users/Administrator/.ssh/id_rsa already exists.
  Overwrite (y/n)? y
  Enter passphrase (empty for no passphrase):
  Enter same passphrase again:
  Your identification has been saved in /c/Users/Administrator/.ssh/id_rsa
  Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub
  The key fingerprint is:
  SHA256:KTRHEO7LiRm1YiwHceMWjhiX2Cv09ZQ7UBEdnFCLo9M 2656439669@qq.com
  The key's randomart image is:
  +---[RSA 3072]----+
  |.oo.+ +BXoo      |
  |.=o* * +.+.      |
  |o +.= Ooo.       |
  |. .= +oB..       |
  | .. *o+ES        |
  |   + *.+         |
  |    o +          |
  |                 |
  |                 |
  +----[SHA256]-----+
  ```
      命令行复制key的命令如下：
      clip < ~/.ssh/id_rsa.pub   执行完毕直接去服务端粘贴即可
      
      查看key命令：
      cat < ~/.ssh/id_rsa.osc.pub    可以查看你的key
      
      $ cat < ~/.ssh/id_rsa.pub
      ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC+kHYOhxBWSk9XydyJt9FmmNTlOHPGN8RfzKAXXZjUPbCZ9ygVNVef0SgDBNZkun0xTkTuXjZFzJeZlY+durijBpaNE6SU+3/G+hvcshheRiemS0J+dPSUBrFe4OrZhut5JB9cZA1JmHOWlGDXhwcGTrKUoLDVGCk2jbGNsXNPXGsICVLk3PrmYquJW9a5RYKTg6noNX3xVoEur+DEybqxhiGiUkwIzkYlFYFxt3s6CRSNrhnRKLVXGoPZPDjT6GsUl8loo6Z4wvt4X9XpMM1BjGySSCBMXehiQl9Ic3bwE84NK5/QXwe1HTvE7daOOX+SzKKx9cOjh/uRvRQn0j/+9f3DbYcmi+mT4ID/11Nd6uKa+h5+TKe+4PF2yaDuhQMXjDSn8/g3cUgrKqfIA4wVuhRoH+f2cPBaXjaMtT5kk3+iwT7XRSJe1mi15QNR2WUS1eJP+2/R0PHWTqN1R4BUpo/h6CNsbYaPiyQfe2P8LZe/22MXp9UhmfL8qgE1R2s= 2656439669@qq.com
      
      
  
  
      
      
  #### 创建 config 配置多个 ssh key
      
      在 .ssh 目录下创建 config
      vim config
  
      在config文件中编辑
  
      #osOne   注释
  
      Host github.com   这是 ssh -T git@github.com 命令的@ 后面的部分，相当于一个名字 
  
          HostName ssh.github.com   HostName就是git托管的平台url
  
          User 2656439669@qq.com    用户名
  
          IdentityFile ~/.ssh/id_rsa_aaa   指定文件 ~/.ssh/id_rsa
  
  
  
      #osTwo  
  
      Host myOschina
  
          HostName git.oschina.net
  
          User git
  
          IdentityFile ~/.ssh/id_rsa_myOschina
  
  
  
  
      然后 :wq 保存退出。
  
  
  #### 远程库链接
        
        查看远程库信息：
        $ git remote -v
        origin  git@github.com/wushutong/record.git (fetch)
        origin  git@github.com/wushutong/record.git (push)
  
        删除关联的origin的远程库
        $ git remote rm origin
  
        再次链接
        $ git remote add origin git@github.com:wushutong/boostnote.git
  
        重复链接异常      
        fatal: remote origin already exists. 
'''
linesHighlighted: [
  154
  376
  212
]
isStarred: false
isTrashed: false
