createdAt: "2020-09-04T06:25:22.538Z"
updatedAt: "2020-09-06T06:39:38.445Z"
type: "MARKDOWN_NOTE"
folder: "ff82907153aa97c03b03"
title: "VUE 基础语法"
tags: []
content: '''
  # VUE 基础语法
  
  
      1. Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器。
    
  ##### 1. 引入
        1. script 引入  放在head 标签内
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        2.NPM
        3.CLI
  
  
  ##### 2. 核心构成
        <body>
          显示  
          div就是vue实例的挂载点 
          挂载点内的东西都是模板
          template：模板可以写在这个属性上，不写在div内部
          
          <div id="app">
           {{ message }}
          </div>
          
          组件
          <script>
            var app = new Vue({
              el: '#app',
              data: {
                message: 'Hello Vue!'
              },
              methods: {
                a: function(){
                  ...
                },
                b: function(){
                  ...
                }
              }
            })
          </script>
        </body>
        
        $data 里面的参数必须在new vue() 的时候声明才可以使用。没有声明的不是vue 参数,不可以响应式变化。
        Object.freeze(aaa) 之后，此对象将不能进行响应式变化
        
  ##### 3.实例属性和方法
        使用$ 开头，便于区分。
        vm.$data
        vm.$el =
        
        vm.$watch('元素',function(newVal,oldVal){
          console.log(new Val,oldVal)
        })
        打印出元素的变化值。
        
  ##### 4. 生命周期钩子的函数
        beforeCreate    创建页面之前
        created         页面加载之后
        beforeMount     挂载之前
        mounted         挂载之后
        beforeUpdate    数据变化之前
        updated         数据变化之后
        beforeDestroy   页面销毁之前
        destroyed       销毁之后
        
          created: function () {
            // `this` 指向 vm 实例
            console.log('a is: ' + this.a)
          }
          
          this 表示 vue对象。
          
  ##### 5.模板语法
        1. v-text
        {{msg}}  显示vue.$date.msg 属性
        
        v-once 会让属性不会改变，只显示初始化时的数据
        <span v-once>
          这个将不会改变: 
            {{ msg }}
        </span>
        
        2.v-html
        数据会被html语法解析，显示在标签内容处
        
        <span v-html="msg">
          数据会显示在这里
        </span>
        
        3.v-bind    缩写：
        绑定所在的标签 的属性，让属性可变。
        
        <div v-bind:id="dynamicId"></div>
        <div id="dynamicId"></div>  同等于，且id值可变
        
        4.js语法
        {{ msg + 1 }}  四则
  
        {{ msg ? 'YES' : 'NO' }}   三元
  
        {{ msg.split('').reverse().join('') }}
        
        5.v-if  v-else-if  v-else
        值为true，标签存在，值为false，标签移除
          v-show
  
        <p v-if="seen">现在你看到我了</p>
        <p v-else="seen">现在你看到我了</p>
        
        6.v-on  缩写 @
        绑定 DOM 事件
        
        <a v-on:click="doSomething">
          ...
        </a>
        
        7.修饰符 v-on:click.stop
        以.开头的修饰符，修饰指令。
        
        8.v-bind 绑定class 于style
        
        <div
          class="static"
          v-bind:class="{ active: isActive, 'text-danger': hasError }"
        ></div>
        
        绑定的class 对象，值为真，则有这个class，不为真则没有。
        假值（false、0、""、null、undefined 和 NaN） 
        
        <div
          class="static"
          v-bind:class="['active' 'text-danger']"
        ></div>
        数组
        
        9.v-model
        双向绑定
        
  ##### 6.方法
        computed:{
          用于计算的方法，一个属性由其他属性计算得出
          f: function(){
            return 0;
          }
        }
        watch：{
          监听数据的变化，同时执行某方法
          msg: function(){
            this.msg = 'msg 发生了变化'
          }
        }
'''
linesHighlighted: []
isStarred: false
isTrashed: false
